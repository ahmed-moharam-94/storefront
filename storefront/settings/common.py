"""
Django settings for storefront project.

Generated by 'django-admin startproject' using Django 3.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path
from celery.schedules import crontab
# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/








# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.sessions',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_filters',
    "corsheaders",
    'rest_framework',
    'djoser',
    'silk',
    'playground',
    'debug_toolbar',
    'store',
    'tags',
    'likes',
    'core',

]

MIDDLEWARE = [ 
    "corsheaders.middleware.CorsMiddleware",
    # 'debug_toolbar.middleware.DebugToolbarMiddleware', 
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
] 



INTERNAL_IPS = [
    # ...
    '127.0.0.1',
    # ...
]

CORS_ALLOWED_ORIGINS = [
    'http://localhost:8001',
    'http://127.0.0.1:8001',
]

ROOT_URLCONF = 'storefront.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'storefront.wsgi.application'





# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'COERCE_DECIMAL_TO_STRING': False,
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    # 'DEFAULT_PERMISSION_CLASSES': [
    #     # AllowAny is the default value
    #     # 'rest_framework.permissions.AllowAny',
    #     # 'rest_framework.permissions.IsAuthenticated'
    # ]
}
# when sending the token to the server we need to include this prefix in the request header
SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('JWT',),
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1)

}

DJOSER = {
    'TOKEN_MODEL': None,
    # other settings
}


AUTH_USER_MODEL = 'core.User'

DJOSER = {
    'SERIALIZERS': {
        'user_create': 'core.serializers.UserCreateSerializer',
        'current_user': 'core.serializers.UserSerializer',
    }
}

EMAIL_BACKEND = "django.core.mail.backends.smtp.EmailBackend"

DEFAULT_FROM_EMAIL = 'ahmedezzat008@gmail.com'

ADMINS = [
    ('Moharam', 'moharam@test.ocm'),
]



CELERY_BEAT_SCHEDULE = {
    'notify_customers': {
        # path of the task
        'task': 'playground.tasks.notify_customers',
        'schedule': 5,
        'args': ['Hello World'],
    }
}



LOGGING = {
    'version': 1,
    # set disable_existing_loggers to False to collect all loges that comes with django or any library we use
    'disable_existing_loggers': False,
    # define what we are going to do with our logs print it in the console, write to a file, etc
    'handlers': {
        # print the logs in console
        'console': {
            'class': 'logging.StreamHandler'
        },
        # write the logs to a file
        'file': {
            'class': 'logging.FileHandler',
            # specify a file name
            'filename': 'general.log',
            # specify a formatter
            'formatter': 'verbose'
        },
       
    },
     # we can define one or more loggers, you can also specify the module that the logs 
     # will be captured from, if you set the key to '' it capture the logs from all apps
        'loggers': {
            '': {
                # specify the handlers (what we will do with the captured logs)
                # set it the handlers we specified earlier
                'handlers': ['console', 'file'],
                # define the level of severity (the logger will capture this level & higher)
                # level of severity: DEBUG, INFO, WARNING, ERROR, CRITICAL
                # 'level': 'ERROR', # This will catch ERROR & CRITICAL 
                # we can set the level from production environment, set INFO as default so 
                # we don't provide DJANGO_LOG_LEVEL variable it set to INFO
                'level': os.environ.get('DJANGO_LOG_LEVEL', 'INFO')
            }
        },
        
        # optionally we can spicify a formatter (how the log will be written), 
        # simple (show only the message), verbose (show additional info)
        'formatters': {
               'verbose': {
            'format': '{asctime} ({levelname}) - {name} - {message}',
            'style': '{' # This specifies the format string syntax
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{'
        }
        }
    
}